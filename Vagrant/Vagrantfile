#####################################################################################
# Copyright 2012 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant::Config.run do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "debian-squeeze-64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://dl.dropbox.com/u/937870/VMs/squeeze64.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "33.33.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  # config.vm.forward_port 80, 8080

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  config.vm.define :rudder do |server_config|
    # server_config.vm.box = "debian-squeeze-32"
    server_config.vm.forward_port  80, 8880
    server_config.vm.forward_port  389, 1389
    server_config.vm.forward_port  5432, 15432
    server_config.vm.network       :hostonly, "192.168.42.80"
    server_config.vm.provision     :shell, :path => "server.sh"
    server_config.vm.share_folder("rudder-var-share", "/var/rudder/share", "/var/rudder/share", :create => true)
    server_config.vm.share_folder("rudder-var-cfe-inputs", "/var/rudder/cfengine-community/inputs", "/var/rudder/cfengine-community/inputs", :create => true) 
    server_config.vm.share_folder("rudder-var-configrepository", "/var/rudder/configuration-repository", "/var/rudder/configuration-repository", :create => true)
  end

  config.vm.define :node do |node_config|
    node_config.vm.network   :hostonly, "192.168.42.81"
    node_config.vm.provision :shell   , :path => "node.sh"
  end

end
